"use strict";

// Utils.

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validate = validate;
exports.syncFile = syncFile;
exports.exec = exec;

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _prompt = require('prompt');

var _prompt2 = _interopRequireDefault(_prompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Validates input arguments.


// FS.
function validate(program) {
    // Only username is required.
    var expectedArgs = 1;

    if (program.batch) {
        ++expectedArgs;
    }

    if (!program.nofile) {
        ++expectedArgs;
    }

    // Validate argument count.
    return program.args.length === expectedArgs;
}

// Sync file with new data.


// Prompt module.
function syncFile(program) {
    var passwordFile = program.args[0];
    var username = program.args[1];
    var password = program.args[2];

    // Hash encode.
    var hash = utils.encode(program);

    // Collector params.
    var found = false;
    var newLines = [];

    if (!program.create) {
        if (!_fs2.default.existsSync(passwordFile)) {
            console.error('Cannot modify file ' + passwordFile + '; use \'-c\' to create it.');
            return;
        }

        var lines = _fs2.default.readFileSync(passwordFile, 'UTF-8').split("\n");

        // Loop lines.
        lines.forEach(function (line) {
            if (line.indexOf(username + ':') === 0) {
                found = true;

                if (program.verify) {
                    // For verification we need existing data.
                    var _hash = line.split(":")[1];
                    if (utils.verify(_hash, password)) {
                        console.log('Password for user ' + username + ' correct.');
                    } else {
                        console.log("Password verification failed.");
                    }
                } else if (program.delete) {
                    console.log('Deleting password for user ' + username + '.');
                } else {
                    // Updating password.
                    newLines.push(username + ':' + hash);
                    console.log('Updating password for user ' + username + '.');
                }
            } else if (line) {
                newLines.push(line);
            }
        });
    }

    if (!program.verify) {
        if (!found) {
            if (program.delete) {
                console.error('User ' + username + ' not found.');
            } else {
                newLines.push(username + ':' + hash);
                console.log('Adding password for user ' + username + '.');
            }
        }

        // Write data.
        _fs2.default.writeFileSync(passwordFile, newLines.join("\n") + "\n", 'UTF-8');
    }
}

// Finalizes processing by printing output or changing password file.
function finalize(program) {
    if (program.nofile) {
        var username = program.args[0];
        var hash = utils.encode(program);

        // Print to stdout.
        console.log(username + ':' + hash);
    } else {
        try {
            syncFile(program);
        } catch (err) {
            console.error(err.message);
        }
    }
}

// Read password from stdin.
function readPasswordStdIn(program) {
    var password = "";

    // Reading pass.
    process.stdin.on('data', function (chunk) {
        password += chunk;
    });

    // Finished reading.
    process.stdin.on('end', function () {
        program.args.push(password);
        finalize(program);
    });
}

// Read password.
function readPassword(program) {
    // Prepare prompt.
    _prompt2.default.message = "";
    _prompt2.default.delimiter = "";

    var passportOption = [{ name: 'password', description: 'New password:', hidden: true }];
    var rePassportOption = [{ name: 'rePassword', description: 'Re-type new password:', hidden: true }];

    // Try to read password.
    _prompt2.default.get(passportOption, function (err, result) {
        if (!err) {
            (function () {
                var password = result.password;
                setTimeout(function () {
                    _prompt2.default.get(rePassportOption, function (err, result) {
                        if (!err && password == result.rePassword) {
                            program.args.push(password);
                            finalize(program);
                        } else {
                            console.error("\nPassword verification error.");
                        }
                    });
                }, 50);
            })();
        } else {
            console.error("\nPassword verification error.");
        }
    });
}

// Processing command.
function exec(program) {
    if (validate(program)) {
        if (program.stdin) {
            readPasswordStdIn(program);
        } else if (!program.batch && !program.delete) {
            readPassword(program);
        } else {
            finalize(program);
        }
    } else {
        program.help();
    }
}