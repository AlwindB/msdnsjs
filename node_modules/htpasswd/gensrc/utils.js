"use strict";

// Importing crypto module.

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha1 = sha1;
exports.verify = verify;
exports.encode = encode;

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _apacheMd = require('apache-md5');

var _apacheMd2 = _interopRequireDefault(_apacheMd);

var _apacheCrypt = require('apache-crypt');

var _apacheCrypt2 = _interopRequireDefault(_apacheCrypt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates sha1 hash of password.


// Importing apache-md5 module.
function sha1(password) {
    var hash = _crypto2.default.createHash('sha1');
    hash.update(password);

    return hash.digest('base64');
}

// Verifies if password is correct.


// Importing apache-crypt module.
function verify(hash, password) {
    if (hash.substr(0, 5) === '{SHA}') {
        hash = hash.substr(5);
        return sha1(password) === hash;
    } else if (hash.substr(0, 6) === '$apr1$' || hash.substr(0, 3) === '$1$') {
        return (0, _apacheMd2.default)(password, hash) === hash;
    } else {
        return hash === password || (0, _apacheCrypt2.default)(password, hash) === hash;
    }
}

// Encodes password hash for output.
function encode(program) {
    if (!program.delete) {
        // Get username and password.
        var password = program.args[program.args.length - 1];

        // Encode.
        if (!program.plaintext) {
            if (program.crypt) {
                password = (0, _apacheCrypt2.default)(password);
            } else if (program.sha) {
                password = '{SHA}' + sha1(password);
            } else {
                password = (0, _apacheMd2.default)(password);
            }
        }

        // Return it.
        return password;
    }
}